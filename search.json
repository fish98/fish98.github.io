[{"title":"Trick or Treat","url":"/2018/11/01/halloween/","content":"\n忽然想起来前几天有人问 :圣诞节和万圣节有什么区别啊.... emmmmm .... emmmm\n+ 扔上来一些不全的万圣节特典?(盗图)\n+ [XDownload V1.2](https://github.com/fish98/XDownloader)新功能完成~可以下载原图了!\n+ 很有意思的歌!  \n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=440 height=90 src=\"//music.163.com/outchain/player?type=2&id=31356680&auto=1&height=66\"></iframe>\n<!-- more -->\n\n# XDownloader v1.2\n\n<img align=\"right\" width=\"180px\" src=\"https://d29fhpw069ctt2.cloudfront.net/icon/image/49283/preview.svg\">\n\n## Update new Feature on Nov.8th\n\n+ Make Multi File Download Avaliable => Modify type of `config.url` from Number to Array.\n+ Require Progress Package to add process bar when downloading instead of logs.\n+ Fix file detect bugs.\n\n## Update on Nov.5th\n\nDue to the demand of origin sized image when embeddig, add new feature for origin sized download option in config file\n\ncheck the usage in new T-UI feature and planning to migrate to electronic version with all platform packaged\n\n## Now Support Process Bar Status Check and Original Image Download\n--- \n\n# Halloween!\n\n## 1\n\n- TTfish @fish * 1h\nsaw a gil dressing up as a FBI yesterday night...that's is literally the scariest halloween costume i'e ever seen.\n\n<img src=\"2.jpg\" />\n\n- TTfish @fish * 55min\nThat's REALLY SCARY!\n\n<img src=\"1.jpg\" />\n\n## 2\n\n<img src=\"3.jpg\" /> \n\n## Artist: Unknown\n\n## 3 \n\n<img src=\"4.jpg\" />\n\n## 官方发糖?\n\n<img src=\"5.jpg\" />","tags":["Halloween"]},{"title":"About Embed!!!","url":"/2018/10/28/embed/","content":"+ 咕咕已久的教程上传 讨论一下奇奇怪怪的东西\n+ 要好好学习英语和日语了!!! ( 认 真 )\n+ 梦里什么都有: 成为一体姬以后进军时轴压制!!!\n<!-- more -->\n\n扔了一些古老的教案在上面 还是非常简单的!!! 毕竟不是自己做 \n\n[Click Me to Download!!!](\"https://sea.zjuqsc.com/f/bae86eed04a74dde8e3b/?dl=1\")\n\n## 关于曾经遇到的一些奇特的姿势\n\n对于全彩半透明 .... emmmm 要有耐心就好了 举最近的一个例子吧 非常的难受 一页里面出现了无数的拟声词\n\n这里讨论一下对于语气词后促音的对待\n\n**按照惯例**: 语气词后的促音应该擦除!!! (对于黑白的就经常忘记 wwwwww)\n\n<img src=\"2.jpg\" />\n\n+ 这个は后面的是あ的片假名 所以应该写成“哈啊”\n\n<img src=\"3.jpg\" />\n\n+ 这个ん后面就是个つ 赶紧擦掉!!!\n\n<img src=\"1.jpg\" />\n\n+  那么问题来了 这个は后面的... 是个啥!!! \n+ 以老朽拙见 这个应该是个草体的あ 所以应该翻译成“哈啊”!!! (大雾)\n\n## 关于一开始遇到的小问题\n\n+ 关于photoshop的模仿图章使用 应该选择清晰的网点 然后对准!!! 当网点完全重合的时候 模仿图章就会把网点越做越大 \n这个技能很重要（不然就凉了 \n+ 对于源图层的保存 一般开始工作的时候 先`Ctrl + J`创建一个复制图层 设置透明度成为50% 这样哪怕之后搞砸了 也可以用模仿图章改回来\n+ 所有的字需要居中对齐... 这个真的好难啊 要瞎了 \n+ 很多时候生成jpg文件的时候会发现有些字被隐藏了 还是得检查一下呢!!\n\n以上~~~\n\n<img src=\"4.jpg\" />\n\n","tags":["Face"]},{"title":"Painting(偽物) と Ebedding ??","url":"/2018/10/24/managacraft/","content":"Update on 8102.10.24! \n\n+ 終於不寫技術博客了呢 看來跳跳魚要跑路了（大霧）\n+ 最近做的一些小东西(伪·搬运)\n+ **Groobum Princess怎么可以这么可爱!!!**\n\n<!-- more -->\n\n# About Embedding\n\n嵌字真的很累呢！ 翻譯快出來捱打！！！ 過幾天有空考虑把教程放上来\n　\n唉 终究还是暴露了 emmm 前几天接了刀剑乱舞的一本漫画 神仙翻译居然把所有的字都给我翻译了~ \n\n然鹅翻译还有一些错误... 这里就不拿出来表了... 翻译酱么么嗒!\n\n<img src='translate.jpg' />\n\n* 这张图我要做多久咧 ~~！！\n\n<img src='complete.png' />\n\n+ 做完了嘤嘤嘤 然而还有好多其他锅...\n---\n\n# Groobum Princess ！！\n\n前几日在Reddit看到了Groobum Princess的同人(物?)作品 太妙了 稍微处理了一下 忍不住想扔上来\n\n<img src='g1.png' />\n<img src='g2.png' />\n<img src='g3.png' />\n\n\n","tags":["Groobum"]},{"title":"AI Manga Colorize Attempt","url":"/2018/10/14/virt/","content":"\n* 跳跳鱼博客大更新！！！ 嘟噜噜噜噜~\n\n今天介绍一下[一喵](https://github.com/lllyasviel)做的人工智能[PaintsTransfer](http://paintstransfer.com/)上色 感覺如果有美術功底的話 還是挺好玩的（然而跳跳魚沒有）\n\n这几天进了一喵的社区玩耍 一半是程序员 一半是画师 hhhhhh\n\n说好的嵌字教程又咕咕咕啦~~~\n\n<!-- more -->\n\n# From Style2Paint to PaintTransfer\n\n一喵是苏州大学的大四学生 一年前开源了[Style2Paints](https://github.com/lllyasviel/style2paints) 现在已经6000多星星了 还听说投了一篇Siggraph的paper 之后一直在做[MangaCraft](http://mangacraft.net/) 目前新产品[PaintTransfer](http://paintstransfer.com/) 做的是迁移学习 虽然还是闭源的 但是非常厉害的工程师呢~\n\n## 上两张非常糟糕的尝试 导致彩化任务彻底失败\n\n之前简单的做了一会儿的MangaCraft 花了一页 最大的感觉就是不懂配色真的很难受~ 甚至需要google篮球架的颜色来乱涂...\n\n<img src=\"show.jpg\" /> \n\n这是训练完的效果\n\n<img src=\"train.jpg\" />\n\n这是训练的色彩填充\n\n\n第一次看到这个项目也是之前 组里面的一本漫画是用了这个做了彩化 然鹅其实应该先嵌字再彩化？（太狠了）\n组里后来说这个的配色在程序员的手中变得难以忍受（确实——）\n感觉这个比较适合用来玩耍八~~~ 嘻嘻 并不是很能够用来做正经工作\n\nEmmmmmm 对于实际的操作使用 其实还是有技巧之说 首先 漫画不是很适合 尤其是修完图后的 \n\n线稿上色就比较稳健 迁移学习也能够做的很开心 一般展示里都是线稿...可以去找来看看\n\nemmmm 上两张图呗~~\n\n<img src='cat.jpg' />\n\n\n\n\n","tags":["Art"]},{"title":"Virtual Machine Bugs","url":"/2018/10/10/paint/","content":"\n* 好久沒有更新博客了呢!!! 你這條魚爲什麼這麼怠惰啊...\n\n最近在忙一些奇奇怪怪的事情 看來還是得好好記錄一些好玩的事兒呢\n\n爲了能在寫代碼的時候能夠使用QQ 安裝了上古Windows7 結果折騰了好多時間...\n\n<s>羊可愛：所以你不能看手機咩?</s>\n\n<!-- more -->\n\n<s>先挖一個坑 明天填（咕咕咕）</s>\n\n# About Virt-Manager \n\nemmmmm 用虛擬機還是一件非常好的事情 然而之前嘗試自己配置自己的kvm 被qemu各種奇怪的配置弄暈了... 然而屈服了Virt-Manager以後 終於在圖形化界面中找到了新世界（大霧———）然而有很多神仙錯誤 例如鼠標移動的神奇卡噸 分辨率和網速更是像一臺裝了Windows XP的2000年計算機 \n\n途中在建立共享文件夾的時候 點擊小標籤“shared files”根本不理睬我 反而報錯\n```bash\nunsupported configuration: shared access for disk 'xxx' requires use of supported storage format\n```\n\n嘛 看來文件格式不能夠讓他滿意呢 面向Google搜索後 發現大體有兩種方法\n\n* 第一種是用libguestfs工具 修復上面的問題 實現share file\n\n## 小插曲\n\n在裝libguestfs的時候 出現了報錯\n\n```bash\ncannot run pkg-config to check libvirt version at Makefile.PL line 8.\n==> ERROR: A failure occurred in build().\n    Aborting...\nError making: perl-sys-virt\n```\n\nemmmmm 總而言之就是沒有pkg-config導致perl-sys-virt的build失敗了\n\n這可真是丟人... 於是馬上安裝必須包base-devel 解決上述問題 arch上還是非常需要的\n\n* 第二種是用qemu-nbd 直接掛載了在/var/lib/libvirt/images裏的qcow2文件\n\n具體不詳細說了 跳跳魚已經放棄了!!!\n\n可能kvm不是很適合來跑圖形界面 還是換一個工具吧 於是\n\n<img src=\"bear.jpg\" />\n\n# About VirtualBox\n\n剛上手virtualBox的時候 跳跳魚非常偷稅!! 這是什麼天使?! 爲什麼速度那麼快 界面那麼流暢... 而且有很多都幫你封裝好了 例如共享文件夾之類的\n\n還有好多優點 例如 动态分配硬盤空間 這讓我之前被kvm吃掉的20G可以少一些使用\n\n按住F8進入安全模式後 打開了3D加速 CD Drive Guest Addition很棒\n\n還有一個就是神奇的Seamless Mode 成功的把導航欄裝了起來 感覺就像在使用Windows導航的Arch Linux\n\n點名表扬~ 雖然有一些Bug 不過可以理解...\n","tags":["KVM"]},{"title":"Notes For Archlinux Installation","url":"/2018/08/28/note/","content":"+ 感谢著名画师[电波墙](https://weibo.com/u/1829854847?refer_flag=1001030101_)授权的Banner和缩略图！！！\n+ 最近重新安裝了Arch Linux 非常的開心 記錄一些小細節(感謝[约伊兹的萌狼乡手札](https://blog.yoitsu.moe/)！)\n+ 增加了幾個之前很想尋找但是忘記了的命令\n+ 圖片過多導致博客更新頻率降低 之後儘量減少圖片吧/(- O -)/\n\n<img src=\"cat.gif\" />\n<!-- more -->\n\n# About Time SetUp\n\n因爲之前是第一次使用非圖形化操作系統（在自己的電腦上） 有些操作有些亂來 現在想來仍十分愧疚 於是乎有一些環境被污染\n例如npm和pip 這些包管理工具和pacman 於是乎重新安裝了Arch （然鵝忘記備份了.ssh文件夾 丟了openvpn的配置 嗚嗚嗚）\n\n剛安裝完系統以後 一般會先校對時間 而有些電腦的時間會有一些問題 想起了貴潮去年的納新短信 跳跳魚收到的顯示:\"請在晚上23:00參加第二輪面試\" 當時就懵了（hhhh） 當然我的電腦也有同樣的問題 記錄一下直接更改時間的方法（當然也可以在`timedatectl`中更改~）\n\n### 情况不容乐观\n\n重启了Windows以后可能把我的硬盘时间更改了 导致再此进入Linux的时候 时间又是英国时间\n\n可能的解决方法: \n+ 改Windows的注册表（哭）\n+ 暴力设置.bashrc的配置\n+ <s>再也不用Windows</s>(真香)\n\n關於跳跳魚神奇的網卡驅動問題 下次再細說\n\n```bash\n$ rm /etc/localtime\n$ ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n```\n\n`date`命令可以查看時間 例如\n```bash\n$ date\nTue Aug 28 23:49:17 CST 2018\n```\n\n### 更新于2018/9/30 17:50\n\n然而上述方法在经历了长期的重启后 完全失效了 当然`sudo hwclock --localtime`显示的是格林尼治时间 然鹅`sudo hwclock --utc`却是东八区的时间 这就很奇怪 于是安装openntpd 并且enable 于是就很快乐 \n\n双倍的快乐！！\n\n---\n\n# 記錄一些容易忘記的花裏胡哨沒有實用的命令\n\n+ Figlet\n將字符按一定字體輸出(ASCII FONT ART?)\n記得有個拓展叫\"Toilet\"不是很想介紹 顏色比較難以接受\n```bash\n$ figlet \"TTfish\"\n _____ _____ _____ ___ ____  _   _ \n|_   _|_   _|  ___|_ _/ ___|| | | |\n  | |   | | | |_   | |\\___ \\| |_| |\n  | |   | | |  _|  | | ___) |  _  |\n  |_|   |_| |_|   |___|____/|_| |_|\n```\n\n+ Cowsay/Cowthink\n一隻牛在說話或者在思考（並不一定是牛）\n```bash\n$ cowsay -l // -c指定模型 -l查看模型\n$ cowsay \"ttfish\"\n ________ \n< ttfish >\n -------- \n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n```\n\n+ Sl\n日本開發者寫的懲罰工具 打錯ls的下場 一輛火車跑出來 跑完之前無法被停止（跳跳魚經常被氣死）\n```bash\n$ sl\n火車長什麼樣自己看~\n```\n\n+ Asciiquarium\n水族館 有些奇奇怪怪的魚游來游去\n```bash\n$ asciiquarium\n```\n\n+ Xmas\nNpm 的彩蛋？不是很清楚\n```bash\n$ npm xmas\n會出來一顆樹\n```\n\n+ Ponysay/Ponythink\nponies版本的cowsay/cowthink\n\n+ Doge\n一隻doge並且胡言亂語\n\n+ Cmatrix\n從天而降的莫名其妙的字符（用來裝蒜？）\n\n+ Fortune\n隨機的段子（不然爲什麼叫fortune呢）\n```bash\n$ fortune //包名叫cowfortune\n```\n\n+ Lolcat\n彩虹貓的導出格式（顏色有時候慘不忍睹）\n```bash\n$ echo \"ttfish\" | lolcat\n```\n\n+ Xeyes\n兩隻眼睛跟隨鼠標移動 然而是窗口模式的\n```bash\n$ xeyes //包名叫xorg-xeyes\n```\n\n\n\n","tags":["Linux"]},{"title":"Note for Electron && Vue.js","url":"/2018/08/15/electron/","content":"+ 最近写了一点点Electron 开发体验一般(然鹅在Arch上非常的痛苦)\n+ 贵潮的纳新系统用Vue来写 遇到了一些坑\n+ TypeScript很棒 Golang很妙 Vue是个什么玩意儿\n\n<img src=\"rm.gif\" />\n\n<!-- more -->\n\n# Electron.js\n\nElectron是由Github开发，用HTML，CSS和JavaScript来构建跨平台桌面应用程序的一个开源库 2014年开源的\n\n<img src=\"electron.png\" />\n\n## About Installation Bugs\n\n> 安装会卡在`node install.js`上 然后报错退出 \n\n这个问题很多人都会遇到 当然跳跳鱼也遇到了 看到别人用黑魔法直接解包用了 这里还是写一下比较友好的方法:\n+ 换个国内镜像 浙大源 淘宝源 QSC源\n+ `npm install -g electron`后的参数`--unsafe-perm=true --allow-root`这个就是全局安装的权限问题了(头疼)\n\n> **不知为何我的Arch安装了Electron以后输入`electron .`以后石沉大海 啥事都不会发生 遂怒转Windows开发**\n\n## Electron Development\n\n安装完包以后 就可以进行开发 package.json的配置不可缺少\n```json\n\"main\": \"main.js\",\n\"scripts\": {\n    \"start\": \"electron .\"\n  },\n\"homepage\":\".\",\n\"dependencies\": {\n      \"electron\": \"^\",\n    }\n```\n当然 直接`electron .`执行也没有问题 前提是npm全局安装了electron并在环境变量里有\n\n## Hello World && A little More\n\nElecreon有集成好的 需要记忆的API (不喜欢记API) 稍微写一点在这里 这是个简单的Hello World\n以下是`Main.js`\n```javascript\n\"use strict\"\nconst electron = require('electron')\nconst Menu = electron.Menu\nconst app = electron.app\nconst BrowserWindow = electron.BrowserWindow\n\nlet mainWindow\n\nfunction createWindow () {\n \n    mainWindow = new BrowserWindow({backgroundColor: 'white', width: 1200, height: 800})\n\n    mainWindow.loadURL(url.format({\n    pathname: path.join(__dirname, 'index.html'),\n    protocol: 'file:',\n    slashes: true\n  }))\n    mainWindow.on('closed', function () {\n    mainWindow = null\n  })\n}\n\napp.on('ready', createWindow)\n\napp.on('window-all-closed', function () {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', function () {\n  if (mainWindow === null) {\n    createWindow()\n  }\n})\n```\n\n那么这样的效果就是创建一个1200*800的窗口 并且加载了本地的`index.html`的代码 \n\n> 关于`BrowserWindow`的一些参数 \n\n+ `autoHideMenuBar: true`会隐藏页面的菜单栏 按下`Ctrl`后会显示\n+ `fullscreen: true` 全屏(有点难受 关闭按钮被顶出去了)\n+ `frame: false` 那边框就全没了\n+ `transparent: true` 这个很有意思 会变成透明的底板(去年的潮毕 薯米君好像就是这样写的弹幕)\n\n还有很多属性 不写了 \n\n关于Electron重要的是它只用了Chromium的渲染库而不是其全部组件 多进程就很喵 狠狠的写路由可以写很好的工程 比如正在使用的VSCode(你怎么还在用VSCode写博客?)\n\nNote: \n```html\n<script>\n      require('./haha.js')\n    </script>\n```\n\n# Vue.js\n\n<img src=\"vue.png\" />\n\n嘛 之前用React 写的还算是开心？ 写微信小程序的时候 用过Wepy 和Vue非常的像 而因为微信的Api实在是太糟糕了 当时写的不舒服到也没有很大的怨气 还很高兴 但是真正要写Vue的时候 感觉不是很舒服了(当然开发效率很快 Route之类的裸犇君也写得很好)\n\n## About Installation \n\n打包工具很不错 \n\n```bash\n$ npm install -g vue-cli\n```\n然而一开始de了一小时的bug 才发现少装了四个包 眼泪流下来 所以 这个很重要\n\n```bash\n$ npm install -g babel-plugin-syntax-dynamic-import\n```\n\n如果遇到Vue异步组件的懒加载报语法错误的时候 就是没有装这个包的锅 别问我怎么知道的\n```javascript\nroutes: [\n      { path: '/', component: () => import('./components/Home.vue') },\n    ]   \n```\n非常妙的语法\n\n## About Data\n\n之前写微信小程序就被Data弄得晕头转向 并不像React的State一样管理方便 于是小项目小数据的话 一般还是不放在Data里 直接在script标签里定义 更改也是暴力的用`this.xxx = xxx`来更改\n\n* Typescript => 声明一堆对象的数组: let TTfish : object[] \n* object 不能大写 \n","tags":["Electron"]},{"title":"Some Linux Command && Tools","url":"/2018/07/27/linux/","content":"+ Record Some of the Linux Commands and Useful Tools For futher Use\n+ Ready to insert some code with other language (Web Assamblely? No idea yet~)\n+ To be continued ...\n\n<!-- more -->\n---\n# Linux Commands && Packages/Tools Used Recently\n\n## Linux $PATH Configure\n**Normally written in `.bashrc` or `.bash_profile`**\nThe $PATH is really important for searching for excutable commands and as for configuration, we should not forget to avoid over-writting the origin PATH \n```bash\n$ echo $PATH  // For check the present path\n$ export PATH=\"xx/xx/xxx/bin:$PATH\" // Add the new path in the front \n```\n+ Do not forget the $PATH \n+ \":\" is used for seperate two paths and conbine into the new path\n\n<img src=\"pop.jpg\"/>\n\n## Python Environment && Pip && Conda\n\nThe Anaconda Provides the feature to set a virtual environment for python development. \n\n- Be aware of the difference between `python -m xxxx` and `python xxxx`\n- The python environment create => \n```bash\n$ conda create -n XXXXX python=X.X\n```\n- The Usage of the environment =>\n```bash\n$ source activate XXXX(The name you created before)\n$ conda install -n XXXX [package]\n$ source disactivate XXXX\n$ conda remove -n XXXX -all \n$ ...\n```\n\n* The Installation of the Packages from Third Party is Recommanded to install in the Virtual Environment instead of Global SUDO commands !!! (impoertant) \n\n## Nload\n\nDisplay the network usage status with TUI \n\n## Objdump \n\nDisplays information about one or more object files.  The options control what particular information to display.\n\n## Du && Df\n\nList the size of a dir and the file.\n\n## Convert (.JPG -> .GIF)\n\nWell, a well known command line tool from ImageMagick\n\nThis time for the jpgs to transform into gif =>\n\n```bash\n$ convert -delay 20 -loop 0 *.jpg ttfish.gif\n```\n\n<img src=\"imagemagick.png\" />\n\n## Ffmpeg\n\nA Useful Stream Video Convertor (.m3u8 FILE transition)\n\n```bash\n$ ffmpeg -i \"remote_address\" -c copy ttfish.mp4\n```\n\n## File \n\nCheck the specific type of a file.\n\n## Nm\n\nList the symbols from object files objfile. If no object files are listed as arguments, nm assumes the file a.out.\n\n# To be continued...\n","tags":["Linux"]},{"title":"Breif Record of SCT_Summer Cource","url":"/2018/07/16/summmer/","content":"\n# Forgetable Knowledge Records Recently (Updated) \n\n> Finish Simple Linear Matrix Operation with MPI/CUDA/OpenMP in C (C++ is too hard!!!)\n[Source Code](https://github.com/fish98/C-programing/tree/master/SCT_summer)\n\n* 近期可能要开辟游戏、动漫的分享感想板块来着...\n* 正在好好考虑需不需要解析一个一个子域名... 好像阿里云域名要到期了来着 /思考\n* **魚は少し怠け者でしょうていいですか？**\n\n<!-- more -->\n--- \n# SCT Summer Tasks And Notes\n\n## MakeFile \n\nFile used for compile codes\n\nA not good makefile for MPI => \n\n```bash\nmatrix.o : matrix.h\n\tmpicc matrix.c -c -lm  \n\tmake main\nmain : main.c matrix.o\n\tmpicc main.c matrix.o -o main -lm -O2 -march=native\n\techo -e \"\\nExcute main to Start\\n\"\n\trm matrix.o\nclean: \n\trm main\n```\n+ The makefile usually contain the Pseudo-class(like clean or install) \n+ the privilege can be modefied due to the compile dependency\n+ gcc compile optimitation (Further Deeper...)\n\n\n## Basic Linear Matrix Operation in C\n\nUse new Struct for storing Matirx\n```C\ntypedef struct matrix {\n    double *data;\n    int row;\n    int col;\n} Matrix;\n```\n\nThen we just need to set All the date into the one dim data pointer.\n* **Segment Fault Warnning** Plaese check if data is well malloced ！\n\n```C\nvoid initMatrix(Matrix * M); \n\n// Scan the number and set into the Matrix(the first two are column and row integer)\n\nvoid ReadMatrix(char* Filename, Matrix * M); // Read the Matrix file while the two first integers are column and row\n\nvoid AddMatrix(Matrix * M1, Matrix * M2, Matrix * M3);\n\nvoid PrintMatrix(Matrix * M);\n\n// Print the Matrix out \n\nvoid MiltiplyMatrix(Matrix * M1, Matrix * M2, Matrix * M3);\n\nvoid FunctionMatrix(Matrix * M1, Matrix * M3);\n\n// MemberWise the Matrix and make function(x) for every element in the Matrix\n\nvoid TransposeMatrix(Matrix * M); \n```\n\n## [MPI for Multi-process Tasks](https://www.open-mpi.org/doc/)\n\n* `#include <mpi.h>`\n\n<img src=\"mpi.jpg\" />\n\nOpen MPI is A High Performance Message Passing Library for multi-process Tasks.\n\n* Some Simple Commands\n\n```bash\n$ lscpu  // check for cpu details and check the number of the cores\n$ mpicc xxx.c -o xxx                // hostfile is the details of your machine \n$ mpirun xxx --hostfile xxx -np x   //the np equals the number of the processes you want to use\n```\n\n* Conclusion => \n\n+ MPI IS Just A Piece Of %*&#$?\n+ For every process, cut the Matrix and send the data for calculation (MPI_SCATTER)\n+ Gather the data back with MPI_GATHER\n+ int MPI_Barrier(MPI_Comm_World) Useful and Tricky\n+ **Use the provided functions by MPI as little as possible for better performace!!!**\n\n## [CUDA && Nvidia](https://docs.nvidia.com/cuda/)\n\n<img src=\"cuda.png\" />\n\nWell, the speed of GPU is much faster than CPUs. The Multi-Threads Programming is also much comfortable than MPI. \n\nSome Simple Commands\n\n```bash\n$ nvidia-smi // check the gpu status (Not correct but useful)\n$ nvcc xxx.cu -o xxx\n```\nSimply run the code with gpu running\n\n* A lot of Things with CUDA\n\n+ the `blocks`, `threads` and `grids`!!! \n+ `__global__` and `__host__` functions calling in different situation \n+ calling function is like `Function<<<blocks, threads>>>(a, b, c)` for GPU calculation\n+ `cudaMalloc((void**)&GPU_data, sizeof(double) * area)` \n+ `cudaMemcpy(GPU_data, CPU->data, sizeof(double) * area, cudaMemcpyHostToDevice)`\n+ `cudaDeviceReset()` is Really important and do not forget to free the memory on the GPU! \n\n## [OpenMP Optimization](https://www.openmp.org/)\n\n* `#include <omp.h>`\n\n<img src=\"openmp.jpg\">\n\nWell designed multi-threads optimization tool(Comfortable to write)\n\n+ `#pragma omp parallel for num_threads(MAX_T)` deal with for loops and distribute threads\n\n# Warnning of above\n\n+ The gcc tool for version over 8.3.1 will not include math.h while compiling. Should add `-ld` for inclusion. \n\n+ gcc compile parameter ： optimization O[1-3] -march or other options\n\n+ The time.h in C Standard Library => `typeof time_t` is unsigned long or long. SO the minus of the start and the final should be type trasnformed first \n\n```C\n#include <time.h>\ntime_t start, final;\ndouble time;\n\nstart = clock();\n\n...functions...\n\nfinal = clock();\n// get time by seconds\ntime = (double)(final - start)/1000  \n```\n\n<img src=\"spc.png\" />\n\n# Notes from Mr.gg\n\n```bash\nRISC\nCISC\nSIMD\nSIMT\n\nrax eax ax ah al \nrbx\nrcx \nrdx \n\nrdi    string \nrsi \n\ncs     16* \nds\nes    \nfs \ngs \nss\ncr0~ce3\nr8~r15 \n\nMMX\nSSE\nAVX \n\nrbp\nrsp\nring kernel mode\n```\n\n","tags":["Review"]},{"title":"Switch backEnd && Wechat Applet","url":"/2018/06/12/6-12/","content":"# Review for the Bugs created last week\n\n> * QSC management training project \n> * Wechat Applets for competition\n> * Plan for futher develpment\n\n<img src=\"wechat.jpg\" />\n\n<!-- more -->\n\nFinish 2018 QSC Graduation Project with 3 fontEnd Project and 4 \"Swith\" backEnd.\nHalf finish Wechat Applets compitition task (based on designer contribution@Maphilius)\nWell, the response can be not that satisfying\nA week without sleep can be not bareable.\n\n<img src=\"sleep.jpg\" />\n\n# QSC Project\n\n## For frontEnd \n\n前端遇到了几个小坑 虽然之前都遇到过：\n\n+ 部署项目的时候 create-react-app不支持相对路径 需要更改成绝对路径（以后还是自己写webpack靠谱 \n+ 实现`：hover`伪类的时候 需要使用奇技淫巧 以后再写文章讨论（自己手写监听函数也行\n+ 小型项目的react并不是很理想 以后考虑其他框架或者裸写 \n\n## For backEnd\nAt least finish the basic requirement while the vote system broke down because the backEnd do not support break-point reconnection protection and the database storage feature. The backEnd is total a \"swifter\" for simple socket messages. The concept should be build that the backEnd should contain router and get the logical storage center. PLease do not make your backEnd a swift again\n\n<img src=\"switch.jpg\" />\n\n注册Reduis PUB/SUB 服务 并做数据储存处理 （ttfish不是很适合写后端\n\n**Mark :** `ws.clients.forEach` 是否可以找到每一个用户的uuid? \n\n# Wechat Applet\n\n这个锅是逃不掉的 毕竟已经在老师面前夸下了海口（所以你到底在干嘛跳跳鱼？！） 周五完成了QSC潮毕项目,周日晚上12时需要上交小程序，强忍微信没有人性的api极限操作 最后完成一个假的小程序（逃 还是总结一下小程序的注意事项吧 下次注意（没有下一次了！\n\n微信小程序的组件库非常的少 但是还是应该试用一下 至少熟悉一下怎么填写配置文件\n\njson中的配置文件与组件的属性并不是一一对应的 不必浪费时间（我真傻 真的\n\n## 使用WEPY 会有相对能忍受的开发体验 (你怎么回事？ \n\n对于\n```javascript\nwx:for=\"{{}}\"\n```\n之类的使用 所有都是字符串限制作用域并使用\n```javascript\n{{}}\n```\n调用Page中的Data的数据（千万要在Data中 假装是React.State\n\n剩下的以后再说（以后最好不说了\n\n# Remember\n- **Do not type 'wx' as 'ws'!!!**\n- **Do not write Wechat Applet Again!!!**\n\n# Add : 上传本篇post时 如果md文件存在双括号会报错！！！\n# Add : TItle 出现冒号会显示报错~","tags":["Node"]},{"title":"Summary for Full Stack Project(I)","url":"/2018/05/17/stack/","content":"# Review for Bilding A Simplest Full Stack Project(FrontEnd)\n\n近期完成了一个全栈的锅 虽然拖了整整一周的ddl 但是还算是写完了 \n\n项目地址: [Journey](https://github.com/fish98/journey)\n\n这次犯了大错误 把后端放在Host branch了 糟糕的工程习惯 下次一定要将他们分开repo\n\nFor full stack projects, the basic components are frontEnd for display, backEnd for process and a Database for storage. We all know that information transfering in the network contain dozens of requests and responses. Based on different protocols, we are able to connect and enjoy Internet. Through different requests and responses, We are able to get a project alive.\n\nAh, Seems a little away from the topic~~No problem!\n\n> Create a simple frontEnd with [Create-react-App](https://github.com/facebook/create-react-app)\n\n> Create a simple backEnd with [Koa.js](https://koajs.com/)\n\n> Create a simple dataBase with [mariadb](https://mariadb.com/)\n\n> 这篇主要总结前端踩到的坑 附赠征文系统的主题 自由的鸡\n\n<img src='thumbnail.png' />\n\n<!-- more -->\n\n## About the Project\n\n本次项目是实现在线征文上传系统 说白了是富文本编辑 需求非常的简单 对于数据库的操作也只需要INSERT即可 整体业务逻辑就是 前端发送请求到后端 后端收到信息 并发送至数据库存储起来 就这样 没有了 没有了 没有了\n\n## Front End \n\nCreate-react-app 是一个非常方便的集成开发包 package都帮你配好了 直接\n```bash\n$ npm install create-react-app\n$ npm start\n```\n就可以使用 查看demo \n当然 在安装了serve以后 可以`serve -s build`开启局域网服务(又扯远了)\n\nBraft-Editor 非常良心的富文本编辑开源库 对于富文本编辑的支持非常的详细 省了不少力\n\n## Review\n\n### 对于JSX的CSS设置\n\n+ 在标签中嵌入属性 需要应用驼峰命名法 例如 `className` `onClick`\n+ 在设置 `outline: none`和`border: 0px 0px`的冲突\n+ 对于`position: relative`的相对设置 以及危险的`absolute`\n+ **移动端的css设定**: 对于这个棘手的问题 我的解决方法是\n\n```javascript\nlet isMobile = false\n\nif(window.innerWidth <= 600){\n    isMobile = true\n}\n```\n非常不优雅的解决方式 但是将这个设置进入state更是一件丢人的事 更好的解决方法应该是使用css的Media Query 然后再糊一些stylus 这边偷懒了... (并不想写CSS)\n\n对于判别完的CSS进行了三目表达式操作 感觉应该优化\n\n### Bind事件函数\n在设置`this`的触发函数时 不能忘了添加`bind`\n例如:\n```javascript\nthis.sendRequest = this.sendRequest.bind(this)\n```\n\n### React组件化\n这次实现了将Footer和Input进行了组件化处理 尽量减少全局变量的使用 (毕竟是LVVM)\n具体还有坑 以后再补充\n\n### 对后端的通信\n这里就要提一下 对于Braft Editor 官方Doc里虽然很详细 但是使用原生XML Request写的 用起来不是很舒服 也不能await. 于是这里用了Fetch(用法详细参照前几篇关于爬虫的post) 还是挺好的 之后就是 POST request至后端 关于Media图片上传的坑: \n\n+ 后端需要运行Nginx 并且在/etc/nginx.conf中进行修改 才能实现图片上传\n这里是一个大坑 对于执行的root可能不允许超级管理员访问 于是暴力的将配置文件中的用户强行改成了当前用户fish \n\n上传图片： \n```javascript\n    uploadFn = (param) => {\n        const formData = new FormData()\n        for(var name in param) {\n        formData.append(name, param[name]);\n    }\n        fetch(`${config.url}${config.imagePort}`, {\n            method: 'POST',\n            body: formData\n        }).then((res) => {\n            console.log(res)\n            if(res.status === 200){\n            successFn(res)\n        } else{\n            errorFn(res)\n        }\n      }\n    )\n\n        const successFn = (response) => {\n          response.json().then(txt => {\n            param.success({\n                url: `http://localhost/${txt}`\n            })\n        })\n\n            setTimeout(2000)\n            windows.location = config.navSite\n        }\n\n        const progressFn = (event) => {\n            param.progress(event.loaded / event.total * 100)\n        }\n\n        const errorFn = (response) => {\n            alert(\"error\")\n        }\n    }\n```\n\n非常粗略的重现了一下 大致是这样的逻辑\n\n+ 图片上传失败会导致资料库无法添加 而对于Braft-Editor的数据获取 就是在editorProps里的content(和RawContent相应)\n\n最后总结前端架构: 整个项目时间消耗太多 而且并不美观 希望能更熟练使用CSS 对于平面页面的设计 能够更好","tags":["Node"]},{"title":"Network Note","url":"/2018/05/08/5-8/","content":"# Daily Note\n\n## Netstat\n\n```bash\n$ netstat\n-a : All Ports\n-at : TCP Ports\n-au : UDP Ports\n-l : List Listened Ports\n-p : List PID && Name\n-ie : Network List \n-s : Statistic Data\n```\n\n<!-- more -->\n\n## TCP && UDP\n\nTCP: 三次握手 connect() (Stream Type)\n     ACK ACKnum SYN seq\n     close() 四次挥手\n     FIN seq\n\n     优化: KeepAlive => avoid half-connection usage waste\n     send package to check whether the connection is alive\n\n     Disadvantage: - More useless wlan transition\n                   - Fail when process unit is 100%\n\n    优化： 超时重传、累计重传\n\n     SYN攻击(Netstat 检测)\n\nUDP: 不可靠的文件传输协议 (报文 长度Limit)\n     拥塞不支持\n     假的校验头\n     数据不备份\n     无连接\n\n     But => 速度快 方便 容错\n     (TFTP)\n\n优化： DCCP\n\n## lsof \n\n```bash\n$ lsof\n```\n-u: search for user\n\n-attach with files(exp. /bin/bash)\n\n-c $argv === | grep $argv\n\n-i network list\n\n-n nfs files list\n\n## Linux environment path and stat command\n\nAll the command can be run in the terminal must be registed in the environment path.\n\nuse nlof to get back rm-ed files seems unpromising...","tags":["Linux"]},{"title":"SuperComputer Basic Attempt && Linux Terminal Tests","url":"/2018/05/06/spc/","content":"\n# Problems Appeared On The Cluster These Days\n\n> + 近几日在南昌进行ASC2018比赛, 学校内的集群暂时交由跳跳鱼维护, 遇到了不少问题, 先把锅放在这里, 以后希望能补充解决\n\n> + 关于Linux终端操作的一些尝试\n\n<img src = \"haha.jpg\">\n\n<!-- more -->\n\n## ASC2018 \n\n\"著名开机员\" 跳跳鱼(<s>丢人</s>) 遇到的问题:\n\n+ 浪潮倚天超级计算机的开机系统问题 \n+ NFS 长时间挂起导致睡眠 (事实证明随时可能挂) 系统卡死情况\n\nNFS(Network File System) 良心的开源分布式文件系统协议 支持不同系统的文件共享 当然维护是一件非常令人难受的事情(还好现在不是我) \n\n**NFS数据传输为明文**\n**性能 速度有限**\n\n### ps.关于 Lasture && GPFS的学习 (备忘)\n\n[Problem Discuss](https://www.centos.org/forums/viewtopic.php?t=54405)\n\n<img src = \"error.jpg\">\n\n查询后 得知设置auto mount似乎可以解决问题 但是 这也是以后再尝试的事情了 \n\n另外 在浪潮倚天super00的启动中 需要在boot manager中选择正确的启动盘 不然会报错而不断重启 \n\n *吐槽倚天超级计算机 戴上3M-105 还是吵到头疼 风扇很给力 但是整个机器拆装不易 又重又麻烦 网卡在风口 早上松动 中午完全掉下来 太不稳了*\n\n## Linux Terminal Tests\n\n农生环的集群今日遭到黑客袭击 种了个马 帮忙挖矿 还顺带删除History 只能查到肉鸡的ip\n\n私底下思考 获得root权限可以为所欲为 而删除历史记录 可能有更佳的操作方式\n\n备注： 查看Linux使用记录 Log\n\n```bash\n$ cd /var/log\n```\n\n查看ssh登陆记录 需要`sudo less secure`\n\n而其他记录 都可以较为方便找到 \n\n而对于\"隐身\"操作Linux系统 可以\n\n+ 输入空格 再操作命令 \n当然前提是 环境变量是正确的 \n\n`export HISTCONTROL = ignorespace`\n\n一般应该是OK的\n\n```bash\n$  [space]******\n``` \n+ 关闭当前会话历史记录\n\n`export HISTSIZE=0`\n\n+ 工作结束后清除整个历史\n\n`history -cw`\n\n**在不同的shell中 history是不同的储存 例如fish中执行`type history`可以发现是一个fish函数 而在bash中 就显示是buildin命令 `man`一下也是不一样的**\n\n+ 只针对你的工作关闭历史记录\n\n`[space]set +o history`\n\n同理 重新设定就是\n\n``[space]set -o history``\n\n+ 每一个history前都有标号 只要执行`history -d $argv` 就可以删除指定的命令\n\n\n\n","tags":["SCT"]},{"title":"NodeSpider2","url":"/2018/04/11/NodeSpider2/","content":"\n# Node Spider Finish ！！！\n\n终于写完了！！！ \n\nSource Code: https://github.com/fish98/NodeSpider_classrooms\n\n对于这次工程的反思 最大问题的就是对于纯函数的使用缺失 在工程实现的一开始 使用了太多的全局变量 导致在最后的调试和函数合并的时候出现了一些不优雅的地方 这以后一定要改 函数尽量写成纯函数 或者科里化 \n\n本次主要延续上一次的话题 稍微深入的扯几句\n\n<img src = 'promise.png'/>\n\n<!-- more -->\n---\n\n上次讲到最简单的爬虫 因为爬虫就是对于网站的请求 处理返回response和解析数据 那么 第一步的请求还是很重要的 像[Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch)这样的钦定API就非常推荐使用 具体使用参见官方文档 不加赘述 而对于[Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) 与Fetch之间的互相调用 两者都是web内置的模块 在node.js中使用还是需要import \n\n\n\n## Promise \n\n这个是个重点 非常的重要 对于Promise对象的调用 可以调用Promise.all()来维护一个队列\n\n## 拓展: 对于用户验证FormData的教务网体验\n\n## 拓展: 对于用户登陆的Cookie的Piviv的尝试\n\n## 小结 \n\n对于工程上的爬虫 实在是应该做成分布式的 或者多线程 添加算法来提高速度 以上对于Node简单的尝试只是小打小闹 之后的博客 会尝试分布式爬虫 或者更大规模的试验 还有就是对于反爬虫的应对(ip封禁等等)\n\n<img src = 'ruri.gif'/>\n\n以上 \n\n玩的开心\n\n说好的更新呢 ？这么几个字糊弄谁啊 ？!","tags":["Node"]},{"title":"Basic Node.js (Node Spider1)","url":"/2018/04/06/NodeSpider/","content":"\n#Node的基础与<s>Node.jsの爬虫(上)</s>\n\n--- \n\n说到爬虫，一般会先想到[Scarpy](https://scrapy.org/)或者[BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/)这样的python库 但是 当工程量比较小的时候 不需要像Scarpy这样的企业级分布式爬虫的时候 虽然跳跳鱼非常的咸鱼 身为前端工程师 还是用Nodejs比较舒服(才没有表扬Node呢 口亨) 这篇blog主要总结一下之前的经验 尤其是对于学校教务网的探索心得(逃)\n\n<img src = 'nodejs.png'>\n\n本文包括以下内容：\n\n> * Nodejs的使用\n> * NPM的简易操作\n> * Node爬虫\n> * Fetch 和 Promise请求队列\n> * 万恶的教务网\n\n跳跳鱼自己都没想到会有这么多要写 一篇根本写不完 要不还是分开写吧....\n<!-- more -->\n---\n\n# Node.js\n\n[Node.js](https://nodejs.org/en/docs/)是一个基于 Chrome V8 引擎的 JavaScript 运行环境 Javasrcipt是一门动态类型，面向对象的解释型语言 和Java有相似之处 但是还是有很多的区别(明明叫Livescript 为了蹭Java热度才改的名) 人们发现将它即时编译有非常大的应用前景 于是就有了Node.js这样的前后端兼吃的环境 Node.js不支持多线程(<s>不像Python那样的假多线程</s>) 但是它是非阻塞的 支持并发(<s>不像世界上最好的语言</s>) 它是事件驱动的 带有优秀的npm 包管理器\n\n要用Node.js写爬虫 首先得有node环境 \n\n[Download Node.js](https://nodejs.org/en/download/package-manager/) 根据不同的操作系统下载并安装Node.js \n\n安装好以后 无论在`Terminal / Konsole` 还是在 `cmd \\ powershell`(可能需要允许环境变量) 中 都可以运行Node.js了\n\n```bash\n$ node -v // 查看版本\n$ node   //运行node\n> console.log(\"hello ttfish!\")  //相当于在Chrome里的Console状态\n```\n\n简单的完成了`hello ttfish`的打印 如果需要用node执行以.js结尾的文件 只需要\n```bash\n$ node ttfish.js\n```\n\n这样简单的node环境就搭建完成了 一般会用server来实现nodejs的`hello world` 这里跳过\n\n## NPM的简易使用\n\n[NPM](https://www.npmjs.com/)(Node Package Manager)是Node.js的包管理库 方便模块管理 就像PEAR->PHP一样的概念\n\n下载Node的时候 其实已经把npm装好了 可以输入\n```bash\n$ npm -v // 查看版本\n```\n\n<img src = 'kirino.gif'>\n\n对于npm最多的操作 就是`npm install`安装包 并在`js`文件中引用 但是 首先应该先初始化npm并生成`package.json` *** 这个是个坑 *** npm会根据package.json配置安装项 优秀的开源工程一般都只需要在`git clone`以后 一键`npm install`就安装完成所有的所需项 (就速度而言 推荐设置淘宝源)\n\n```bash\n$npm init // 初始化 生成package.json  // 请认真填写！！ 不然会凉\n```\n\n正常的话 会发现多了package.json文件 默认情况下 npm install的文件会保存在node_modules文件夹中\n\nNode爬虫需要引入的包有许多 先写一个最简单的 ： \n\n```bash\n$ vim ttfish.js\n```\n\n```bash\n$ npm install cheerio // 一个自认为长的像jQuery就很厉害 其实比jQuery还猥琐的库 解析html作用\n$ npm install fetch  // 处理http请求\n```\n(关于 -save和--save-dev的区别 请注意)\n\n使用Fetch 简要的爬取zhihu首页html\n\n```javascript\nconst cheerio = require('cheerio')\nconst fetch = require('node-fetch')\nconst url = 'https://www.zhihu.com'\n\n// 箭头函数的使用 还有好多能加的参数 具体参考官方文档 \n\nfetch(url， {\n  method: POST,\n  header: {\n    // some Headers\n    }\n  body: // 假装有body\n    })\n  .then(res => res.text()) \n  .then(body => {\n    let $ = cheerio.load(body)  // 这里开始迷之cheerio 蜜汁jQuery既视感\n    $('***').map((i, item) => {  // 这里必须吐槽 这个map居然是需要将index作为第一个参数传入的！震惊.jpg\n    // 假装要提取DOM元素进行操作\n    }\n  })\n// 以上只是框架 具体代码可以在我的Github上寻找\n```\n```bash\n$ node ttfish.js //运行即可\n```\n\n[Github 源码](https://github.com/fish98/Spider)\n\n### 笔记 \n\n向对象添加键值对的方法： A[b] = C  ---踩坑已久\n删除对象键值对： delete D.e       \nmap forEach对于数组的操作 不作用于对象\n对于FormData的append 不适用于一般对象\n\n## 假的小结 \n\n先讲到这里吧 写不动 写不动 至少最简单的内模块Fetch可以使用了 当然 SuperAgent库也是没有问题的 爬虫的本质就是向服务端发送请求并对Response进行解析 Node.js写爬虫其实不是很稳 虽然写的爽 但是用起来不是很优雅 之前跑了3000张图片流爬虫 如果全部异步node就会炸 维持10个一组的队列勉勉强强跑了六组跑完了 感觉这样在python的情况下可能会更舒服 等下次再写Promise队列和教务网的爬虫 Promise真是个好东西 hhhh\n\n\n\n\n\n\n\n\n","tags":["Node"]},{"title":"Hexo配置相关问题","url":"/2018/03/14/hexo-img/","content":"\n# 修复了Blog的图片显示问题！\n\n> * Hexo是不会用的，这辈子都不会用的    ——————跳跳鱼（逃）\n\n前前后后熬了很久 终于修复了图片问题\n（<s>忽略添加两次图片的不优雅手段</s>）\n<img src=\"hexo.jpg\" />\n顺带记录一下对于本地hexo命令的不优雅和同步情况：\n先记录一下暴力的方法 期待以后用优雅的方法修改.ejs或者.md\n更新： 对于gitment的一点经验教训\n\n<!-- more -->\n\n## 图片插入和banner问题\n\n一般博客插入banner和thumbnail会和文章内插入的图片冲突 今天F12以后发现`img`标签的请求地址 ：在主页显示的banner和thumbnail请求的地址是根文件夹内的img（例`/ttfish.top/img.img`） 而post内的图片和banner、thumbnail请求的是文档的目录下的img （例`/03/09/img.img`）因此冲突了 一般情况 要么显示其中一者 要么都凉（严重挫伤了写blog的积极性）\n\n<img src=\"smile.gif\"/>\n\n对于Google出来许许多多的博客（甚至官方文档）都没能很好的解决问题 （可能是对icarus的主题不适用？）\n网上列出对于hexo中引用img的方法 大体就以下方法：\n\n>\n>> * 使用 `![](/****/****.jpg)`方法 原生插入 （这样的话 首页的banner和thumbnail就会凉）\n>> * 使用 `{% asset_img *****.jpg ******* %}`\"优雅\"的插入图片 并且设置`post_asset_folder: true`使得每次执行`hexo n \"****\"`的时候可以自行生成和文件名相同的文件夹 可以存储图片 （当然 首页的banner和thumbnail仍然会凉） 跳跳鱼忍受不了！\n>> * 使用 `<img />`标签插入 跳跳鱼最后就用了这个（毕竟能自己控制）\n\n其他好像就没有了，以上根本解决不了问题： 如果更改post的front config 那么就面临跳跳鱼和熊掌的选择（当然选跳跳鱼） 那么 跳跳鱼能想到的方法 只有是：\n\n> * 更改post的`.ejs`文件 优雅的更改主题的banner请求为post文件内的`img`（可惜跳跳鱼太懒）\n> * 暴力添加另一份`banner.jpg`于根目录 让两边都能方便的请求到\n\n于是跳跳鱼就暴力添加了 然后跳跳鱼的resource文件夹内就掺杂了banner和thumbnail 虽然非常不友好 但是能用了！！！ （于是乎跳跳鱼写了新的blog 本来打算弃坑了）\n\n这样可以勉强解决问题 当然以后跳跳鱼会去更改ejs文件 到时候再更新blog吧\n\n## Hexo deploy 玄学问题\n\n>>不知道是跳跳鱼技艺不精还是真·玄学 对于在`config.yml`文件中配置了deploy以后 每次的`hexo d`都充满了机遇与挑战 跳跳鱼惊奇的发现 `git commit`之前的更改 哪怕进行了`hexo clean + hexo g + hexo d`的操作 都没有什么用 然后同时：跳跳鱼尝试删除了隐藏文件夹 `.deploy` 希望使用控制变量法进行实验 可惜时间不够 先立个flag 到时候再总结真正的deploy操作流程 目前先所有的操作都进行（练手速 xxxxx）\n\n至少 现在看来commit和删除隐藏文件夹是多余的\n\nUpdate: 跳跳鱼得出了结论 只进行hexo的\"g+d\"指令是可行的 \n\n### 以上已成为跳跳鱼的黑历史 不愿意删除 希望以后一看到就能羞愧到立刻工作学习而不是继续浪\n\n对于hexo来说 deploy其实是实现了对于push和部署的综合 对于git没有关系 而之前之所以会认为是'玄学' 其实是浏览器的缓存 \n<s>于是为了偷懒而打开了edge</s>\n## Update 2018/4/11 \n\nGitment的填坑经历：\n一个新的blog搭建好以后 当然需要comment系统 当然有很多选择 看来看去gitment最靠谱一点 但是配置的时候 还是出现了一些问题 \nGitment是github平台提供的评论系统 以OAuth App形式 把comment作为issues保存在一个repo里面 \n具体配置的方式 Google一下 讲的很详细 \n但是 对于repo和具体的配置 有坑 \n1· 在OAuth App设置里的callback URL 非常的重要 \n这里的意思是 对于验证完用户信息后重定向的url\n因此 这里应该填写博客的域名 \n### 但是 \n\n由于跳跳鱼的博客是http的域名 因此 会一直显示Not Initialized 并且在Login的时候 会重定向到主页面 无限循环\n这里需要将callback URL改成http格式的\n还有就是 在主题的配置文件中 repo: 应该填写仓库名而不是完全的仓库GitHub地址 不然会找不到而报错 ： Not found\n\n这样搭建完毕以后 gitment应该就可以用了 一开始的时候需要initialize 没有什么问题\n\n欢迎在评论区教跳跳鱼做鱼 或者diss 咸的跳跳鱼 \n\n<img src=\"pop.gif\"/>\n\n## 温馨提示： 手动备份一份source文件夹让跳跳鱼逃过了一次git崩溃导致的文件丢失事故 所以手动备份hexo还是很有用的 不然可能就没有兴致写下去了 ：）\n\n\n\n","tags":["Markdown"]},{"title":"Git基础","url":"/2018/03/07/git/","content":"\n# A Brief Summary For Git Use\n\n---\n\n跳跳鱼的第一篇比较正经的博客呢。简要讲一下非常重要的Git。一开始跳跳鱼接触git的时候，跳跳鱼是拒绝的，虽然现在已经离不开它了本文涉及Git的操作非常的浅，具体官方文档请移步 [Git-scm](https://git-scm.com/) 。跳跳鱼写这篇文章只是想记录一下跳跳鱼踩过的坑，并且起到学习巩固的作用 关于git的源码\\协议\\客户端hook 这里不进行讨论\n\n<img src=\"git.jpg\" />\n\n本文包括以下内容：\n\n> * 什么是Git\n> * git的作用\n> * 本地使用git\n> * 设置远程git仓库\n> * 跳跳鱼踩过的坑\n\n<!-- more -->\n---\n\n## What is Git\n\n2005年Linus以GPL发布了一款分布式版本控制软件，取名为Git，该词源自英国俚语，意思是......目的是为了更好的管理Linux内核版本开发。emmmm，其实应该追溯到2002年以前，那时候以前全球对于Linux的版本（diff）开发都是由Linus本人进行手工修改的，随着工程量的增大，Linux逐渐Handle不了这么多版本修改了，于是Linus转向了（<s>万恶的商业公司</s>）BitMover公司慷慨的授权Linux社区免费使用Bitkeeper这个版本控制系统。然而...然而...在Linux社区里开发Samba的Andrew写了个程序，尝试连接BitKeeper的存储库，还被发现了。BitKeeper拥有者认为安德鲁·垂鸠破坏了使用协议，决定收回Linux社区无偿使用BitKeeper的授权。于是Linus做了一件大事，闭关两周（不到），用C语言写了一个Git出来。2008年Github上线<s>成为全球最大同性交友网站（大雾）</s>\n\n以下是git十周年访谈时Linux接受采访的内容：\n\n>Torvalds：我从来没有想过去做版本控制软件，因为在我看来那是计算机世界里最无聊的事了（如果数据库除外的话 ;^），我天生就不喜欢 SCM。但是 BitKeeper 的诞生改变了我对版本控制的认识。BK 在大多数方面是正确的，在本地保存一个仓库的副本，分布式合并确实是一大创新。这个分布式版本控制的创新完美地解决了 SCM 的通病：“谁可以修改代码”的难题。BK 告诉我们，你只要给每个人一个仓库，问题就解决了。但是 BK 也存在一些问题，技术上的问题（例如重命名很麻烦）还不算什么，它最大的坏处是不开源，很多人因为这个不使用它。所以即使我们有几个核心维护者使用 BK——开源项目可以免费使用——但它也没有普及。虽然它帮助过我们开发内核，但依然有不少痛点没有解决。\n\n>当 Tridge 违反 BK 的使用协议反编译 BK 的时候，我们到达了紧急关头。我花了几个周（还是几个月来着？）试图调解 Tridge 和 Larry McVoy（注：他是 Bitkeeper 的 老大），最后也没有成功。我意识到我不能继续使用 BK 了，但我真的不想回到没有 BK 的黑暗时代。遗憾的是，我们想用其他 SCM 来代替它，却没有找到能在远程方面工作得好的。现有的软件不能满足我对远程方面的需求，我又担心整个流程和代码的完整性，所以最后我决定自己写一个。\n\n---\n\n## Git的作用\n\nGit是优秀的版本控制工具，采用了分布式版本库的作法，不需要服务器端软件，就可以运作版本控制，且速度极快。对于大型项目的分工开发有非常大的作用。Git提供的history 版本回退功能；merge request功能等等都给多线开发提供很大的便利\n\n## How to use Git\n\n> 看文档只能帮助一小部分的学习，实地操作才能初步掌握了git的基本操作\n<s>明明是跳跳鱼太菜</s>\n最简易的操作如下:\n\n### @Download Git\n\nDownload Git on official website for free. 自行安装即可 <h4>[Msysgit](http://msysgit.github.io/)</h4>\n\n###@创建本地git仓库\n\n首先在工程文件夹中运行终端，Windows可以选择右键`git bash here` || 摁住shift+右键 `运行新的powershell窗口` || 运行`cmd` 或者`wsl` 都可以\n\n在终端中，如果没有建立本地git仓库，运行git指令会报错：\n```bash\nfatal: Not a git repository (or any of the parent directories): .git\n```\n于是先创建git本地库：\n\n```bash\n$ git init\n```\n创建完git仓库以后 显示：\n```bash\nInitialized empty Git repository in C:/Users/***/****/****/.git/\n```\n会有一个隐藏文件夹 .git被创立，这就是本地git仓库\n\n###@File Version Management\n\ngit仓库建立以后，就可以进行版本管理和分支操作了，首先默认进入的是master分支，如果是`git bash`打开的话那么在文件夹的右边会有显示当前分支，看一下git目前的状态：\n\n```bash\n$ git status\n```\n\n查看当前git仓库的状态，举一个简单的例子 ，当前文件夹`C/`中只有`test.c`一个文件，初始了git仓库以后应该将需要管理版本的文件add进仓库，于是在终端输入：\n\n```bash\n$ git add test.c\n```\n这样就成功将`test.c`添加到本地git仓库，现在可以轻松追踪管理这个文件的历史版本\n\n这时再一次输入`git status`，就可以愉快的发现，git显示：`Changed files` 和 `no commits yet` 意思是\"对文件有了修改，但是并没有确认修改\" 于是我们应该 \"commit change\"，告诉git：我已经*确定*对该文件进行修改\n```bash\n$ git commit\n```\n这时候出现了一个vim窗口，具体vim的操作在这里不是很想赘述 [Vim](https://github.com/vim/vim)\nPress 'i' 进入insert模式，然后在第一行输入本次commit的记录\n```bash\nadd test.c\n```\n然后 <i class=\"icon-share\"></i> press `ESC` 输入 `:wq`  <i class=\"icon-share\"></i>press `Enter`（表示vim使用完毕并且write+quit）\n\n正常情况就成功添加了一个commit（一个History可回退的节点）.\n\n此时再次输入`git status`检查状态 可以发现在终端显示：\n```bash \nOn branch master\nnothing to commit，working tree clean\n```\n对于一个文件的操作基本就是这样了\n\n> ***补 充**\n>>*  一般会使用`git add .`来表示将文件夹中所有文件（** 写入gitignore的文件除外**）加入git仓库 \n> * 使用`git commit -a`来作为`git commit --all`的操作\n(git有许许多多的命令和参数 参考官方文档可以获得最佳体验)\n\n###@Branch Management\n\n一般在上线的工程中，master分支并不是被直接被修改的（<s>防止push a lot of bugs的事情发生</s>），于是创建分支（branch）十分的必要，在修改代码的时候在分支中修改，需要上线的修改可以使用`merge`这强大功能实现 \n\n```bash\n$ git checkout -b TTfish\n```\n终端会显示：\n```bash\nSwitched to a new branch 'TTfish'\n```\n这个命令是在master分支创建一个TTfish分支，checkout有许多黑魔法，比如可以远程链接track设定的remote git仓库（详见下文），还可以在history中找回文件（即使被`rm - rf`了的）\n如果想回到`master`分支 就输入：\n```bash\n$ git checkout master\n```\n这样在branch里操作更改代码后，可以merge到主干分支中，也可以在一群commits里`git rebase -i`一下，而`git fetch`则是保持和主干的一致 这里不多讲了 当然，要是想删除过去的黑历史，可以使用`reset HEAD~X`(不推荐使用...直接去github的history去找commit不就好了)\n\n关于本地的git就讲这么多，具体还是多看官方文档 [Git](https://git-scm.com/docs)\n\n跳跳鱼都写完了 忽然断了网 远程仓库以后的都要重写一遍 真的是 无语了...\n\n## Remote git\n\n这部分是跳跳鱼踩坑最多的地方，稍有不慎就掉进去了，虽然现在回顾一下也不是很烦，但是踩坑确实花了我一周左右（Linus都快写完一个git了）本地文件为了能和别人分享，于是需要将git push到远程仓库，这样就实现了共享 并为分布工作提供便利\n\n### @Simple git config\n```bash\n$ git remote -v\n```\n查看远程git状态，当然什么都不设置的话是什么都不会显示的 于是先配置一下用户名和邮箱 以便git管理commit的时候可以知道是谁进行的操作(这个其实应该是刚下载的时候就要配置的吧)\n```bash\n$ git config --global user.name \"****\"\n$ git config --global user.email ****@****.com\n```\n### @ Set remote git\n首先配置remote 接口 跳跳鱼花了一整天才理解命令的意义：\n举GitHub的例子进行设置最简易的remote git仓库\n打开GitHub 新建respository 点击Clone or Downloads\n就可以查看`SSH`或`HTTPS`的两个地址 先讲简单的`HTTPS`：\n打开本地文件夹 运行终端\n```bash\n$ git remote add origin https://github.com/***/***.git\n```\n这里的意思是 设置远程github的git respository的本地接口 origin为远程的分支（跳跳鱼理解为接口） 对于远程的操作 需要通过`origin`进行操作 `origin`可以替换为任意字符串\n\n```bash\n$ git push -u origin master\n```\n\n这里的意思是 将本地的分支`push`到远程的`master`分支（`-u`的意思是如果没有则创建分支）\n当然 `master`和`origin`都可以自己设置 `origin`必须和之前设置的字符串相同\n这样就成功push上去了 `-f`这个暴力的指令最好少用 虽然跳跳鱼经常用...\n\n这里有一个坑 就是GitHub的新建respository可以选择是否新建README.md 如果新建的话 就需要先`git pull origin（****） master（****）`把README.md合并到本地 不然的话 会因为两个仓库完全不同而拒绝push请求 \n\n至于解决方法 有很多：\n> 1、友好型 ：\n```bash\n$ git pull origin master\n```\n将远程的文件先并入本地git仓库 然后commit以后进行正确操作\n\n> 2、暴力型 ：\n```bash\n$ git push -f origin master\n```\n这个跳跳鱼经常使用（逃）但是缺点是 远程的文件会被覆盖（一般是一个README.md,跳跳鱼不是很在意）\n其他例如clone下来并commit·push的操作就不多说了\n\n至于`set upstream`的操作 就是为了方便之后的操作而设定的一个默认配置\n\n### @ Remote operate\n\n对于远程仓库的操作还有许多：\n```bash\ngit remote rename <name>\ngit fetch <filename>\ngit remote show origin\ngit remote rm origin(****)\n```\n以上分别是：\n重命名 得到文件 显示远程仓库详细知识 删除远程仓库链接（*常用）\n\n好累 有什么要补的下次再说吧 \n最重要的命令还有一个：\n```bash\n$ git clone ********.git\n```\n下载别人或者自己的git文件（完整的） 别忘记clone下来的js文件需要`npm install` 最近一直健忘...\n\n好像没什么了 看完了这篇文章 最简易的远程仓库建立应该没有问题了 网上的博客看了很多 但是在我入门的时候确实没有很能见清楚（<s>搞得好像你讲的很清楚一样....</s>）希望能帮到自己和别人 咔咔\n\n最后的官方链接： https://git-scm.com\n\n<img src=\"pop.gif\" />\n\n## 对于.gitignore的补充 \n\n如果在面临一个大项目 使用了webpack或者安装了新的依赖以后 git的commit提示栏会瞬间飙上去 或者 。\n我们并不希望将一些测试时的依赖包打包在我们写好的文件中 一般会创建一个.gitignore文件 在文件中填入不希望放入git监视的文件 在commit和push的时候 会自动忽略\n\n例\n```bash\n$ vim .gitignore\n\n> node_modules\n```\n这样就是将当前目录的node_modules给ignore了 .gitignore支持正则搜索\n\n另外 对于已经存在于git仓库中的文件 如果再在.gitignore中添加 并不能删除原版本 需要输入\n```bash\n$ git rm --cached *** // 删除git仓库中的***\n```\n\nps.下次写blog 再也不要忘记即时保存！！！！","tags":["Git"]},{"title":"Test Post","url":"/2018/02/28/test-post/","content":"\n# First of all\n\n### Text\n\n<h2>Do you know? </h2>\n<h3>KB -> MB -> GB -> TB -> PB -> EB -> ZB -> YB</h3>\n<!-- more -->\n\n<h4>\n跳跳鱼基本上完成了对于Blog的搭建，剩下就是每天向里面填东西了，还有好多知识需要学习呢，暂时不删除Test Post,等到使用Markdown熟练以后再说\n\n<h4>\n\n### Terminal Test\n\n```bash\n$ rm -rf /\n```\n### Link Test\n\nContact us [qcsTech](https://git.zjuqsc.com)\n\n### Line Test\n\n---\n\n***\n\n### TypoGraphic Test\n\n(C) (R) (P) += +-\n\n### Font Test\n\n** bold ** === __ bold__\n\n<s> Delete </s> == ~~ Delete ~~\n\n### Quote Test\n\n> TTfish once start the PC\n>> However\n>>> the PC broke down\n\n### List Test\n\n<!-- + / - / * -->\n\n#### TTfish \n\n* want to have \n-  a cat\n* want to learn \n   - js\n     * reactjs\n     * nodejs\n     * vuejs\n\n### Code Test\n\n` Now goes some code `\n\n```javascript\n  this.setState(ttfish : null) \n```\n\n\n### Table Test\n\n| Option | Description |\n| ------ | ----------- |\n| ttfish   | true |\n| ttcat | false |\n| ttdog  | null |\n\n#### Right table\n\n| Option | Description |\n| ------:| -----------:|\n| ttfish   | true |\n| ttcat | false |\n| ttdog  | null |\n\n### Image Test\n\n![Alt text][id]\n\n<img src=\"test.gif\" />\n\n### Emoji Test\n\n :-) :-( 8-) ;)\n\n### Special Text Test\n\n 19^th^\n H~2~O\n\n\n\n\n\n\n\n\n\n","tags":["Test"]}]